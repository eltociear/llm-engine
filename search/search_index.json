{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u26a1 LLM Engine \u26a1","text":"<p>The open source engine for fine-tuning large language models. LLM Engine is the easiest way to customize and serve LLMs. Use Scale's hosted version or run it in your own cloud.</p>"},{"location":"#quick-install","title":"\ud83d\udcbb Quick Install","text":"Install using pip <pre><code>pip install scale-llm-engine\n</code></pre>"},{"location":"#about","title":"\ud83e\udd14 About","text":"<p>Foundation models are emerging as the building blocks of AI. However, deploying these models to the cloud and fine-tuning them still requires infrastructure and ML expertise, and can be expensive.</p> <p>LLM Engine is a Python library, CLI, and Helm chart that provides everything you need to fine-tune and serve foundation models in the cloud using Kubernetes. Key features include:</p> <p>\ud83d\ude80 Ready-to-use Fine-Tuning and Inference APIs for your favorite models: LLM Engine comes with ready-to-use APIs for your favorite open-source models, including MPT, Falcon, and LLaMA. Use Scale-hosted endpoints or deploy to your own infrastructure.</p> <p>\ud83d\udc33 Deploying from any docker image: Turn any Docker image into an auto-scaling deployment with simple APIs.</p> <p>\ud83c\udf99\ufe0fOptimized Inference: LLM Engine provides inference APIs for streaming responses and dynamically batching inputs for higher throughput and lower latency.</p> <p>\ud83e\udd17 Open-Source Integrations: Deploy any Huggingface model with a single command.</p>"},{"location":"#features-coming-soon","title":"\ud83d\udd25 Features Coming Soon","text":"<p>\u2744 Fast Cold-Start Times: To prevent GPUs from idling, LLM Engine automatically scales your model to zero when it's not in use and scales up within seconds, even for large foundation models.</p> <p>\ud83d\udcb8 Cost-Optimized: Deploy AI models cheaper than commercial ones, including cold-start and warm-down times.</p>"},{"location":"faq/","title":"Frequently Asked Questions","text":""},{"location":"getting_started/","title":"\ud83d\ude80 Getting Started","text":"<p>To start using LLM Engine's public inference and fine-tuning APIs:</p> Install using pipInstall using conda <pre><code>pip install scale-llm-engine\n</code></pre> <pre><code>conda install scale-llm-engine -c conda-forge\n</code></pre> <p>Navigate to https://spellbook.scale.com where you will get a Scale API key on the settings page. Set this API key as the <code>SCALE_API_KEY</code> environment variable by adding the following line to your <code>.zshrc</code> or <code>.bash_profile</code>:</p> Set API key <pre><code>export SCALE_API_KEY = \"[Your API key]\"\n</code></pre> <p>With your API key set, you can now send LLM Engine requests using the Python client:</p> Using the Python Client <pre><code>from llmengine import Completion\nresponse = Completion.create(\nmodel_name=\"llama-7b\",\nprompt=\"Hello, my name is\",\nmax_new_tokens=10,\ntemperature=0.2,\n)\nprint(response.outputs[0].text)\n</code></pre>"},{"location":"model_zoo/","title":"\ud83e\udd99 Public Model Zoo","text":"<p>Scale hosts the following models in a model zoo:</p> Model Name Inference APIs Available Fine-tuning APIs Available <code>llama-7b</code> \u2705 \u2705 <code>falcon-7b</code> \u2705 <code>falcon-7b-instruct</code> \u2705 <code>falcon-40b</code> \u2705 <code>falcon-40b-instruct</code> \u2705 <code>mpt-7b</code> \u2705 <code>mpt-7b-instruct</code> \u2705 \u2705 <code>flan-t5-xxl</code> \u2705 <p>Each of these models can be used with the Completion API.</p>"},{"location":"api/error_handling/","title":"Error handling","text":"<p>LLM Engine uses conventional HTTP response codes to indicate the success or failure of an API request. In general: codes in the <code>2xx</code> range indicate success. Codes in the <code>4xx</code> range indicate indicate an error that failed given the  information provided (e.g. a given Model was not found, or an invalid temperature was specified). Codes in the <code>5xx</code>  range indicate an error with the LLM Engine servers.</p> <p>In the Python client, errors are presented via a set of corresponding Exception classes, which should be caught  and handled by the user accordingly.</p>"},{"location":"api/error_handling/#llmengine.errors.BadRequestError","title":"BadRequestError","text":"<pre><code>BadRequestError(message: str)\n</code></pre> <p>             Bases: <code>Exception</code></p> <p>Corresponds to HTTP 400. Indicates that the request had inputs that were invalid. The user should not attempt to retry the request without changing the inputs.</p>"},{"location":"api/error_handling/#llmengine.errors.UnauthorizedError","title":"UnauthorizedError","text":"<pre><code>UnauthorizedError(message: str)\n</code></pre> <p>             Bases: <code>Exception</code></p> <p>Corresponds to HTTP 401. This means that no valid API key was provided.</p>"},{"location":"api/error_handling/#llmengine.errors.NotFoundError","title":"NotFoundError","text":"<pre><code>NotFoundError(message: str)\n</code></pre> <p>             Bases: <code>Exception</code></p> <p>Corresponds to HTTP 404. This means that the resource (e.g. a Model, FineTune, etc.) could not be found. Note that this can also be returned in some cases where the object might exist, but the user does not have access to the object. This is done to avoid leaking information about the existence or nonexistence of said object that the user does not have access to.</p>"},{"location":"api/error_handling/#llmengine.errors.RateLimitExceededError","title":"RateLimitExceededError","text":"<pre><code>RateLimitExceededError(message: str)\n</code></pre> <p>             Bases: <code>Exception</code></p> <p>Corresponds to HTTP 429. Too many requests hit the API too quickly. We recommend an exponential backoff for retries.</p>"},{"location":"api/error_handling/#llmengine.errors.ServerError","title":"ServerError","text":"<pre><code>ServerError(status_code: int, message: str)\n</code></pre> <p>             Bases: <code>Exception</code></p> <p>Corresponds to HTTP 5xx errors on the server.</p>"},{"location":"api/langchain/","title":"\ud83e\udd9c Langchain","text":"<p>Coming soon!</p>"},{"location":"api/python_client/","title":"\ud83d\udc0d Python Client API Reference","text":""},{"location":"api/python_client/#llmengine.Completion","title":"Completion","text":"<p>             Bases: <code>APIEngine</code></p> <p>Completion API. This API is used to generate text completions. The Completions API can be run either synchronous or asynchronously (via Python <code>asyncio</code>); for each of these modes, you can also choose to stream token responses or not.</p>"},{"location":"api/python_client/#llmengine.completion.Completion.create","title":"create  <code>classmethod</code>","text":"<pre><code>create(model_name: str, prompt: str, max_new_tokens: int = 20, temperature: float = 0.2, timeout: int = 10, stream: bool = False) -&gt; Union[CompletionSyncV1Response, Iterator[CompletionStreamV1Response]]\n</code></pre> <p>Creates a completion for the provided prompt and parameters synchronously.</p> Example request without token streaming <pre><code>from llmengine import Completion\nresponse = Completion.create(\nmodel_name=\"llama-7b\",\nprompt=\"Hello, my name is\",\nmax_new_tokens=10,\ntemperature=0.2,\n)\nprint(response.json())\n</code></pre> JSON Response <pre><code>{\n\"status\": \"SUCCESS\",\n\"outputs\":\n[\n{\n\"text\": \"_______ and I am a _______\",\n\"num_prompt_tokens\": null,\n\"num_completion_tokens\": 10\n}\n],\n\"traceback\": null\n}\n</code></pre> Example request with token streaming <pre><code>from llmengine import Completion\nstream = Completion.create(\nmodel_name=\"llama-7b\",\nprompt=\"why is the sky blue?\",\nmax_new_tokens=5,\ntemperature=0.2,\nstream=True,\n)\nfor response in stream:\nif response.output:\nprint(response.json())\n</code></pre> JSON responses <pre><code>{\"status\": \"SUCCESS\", \"output\": {\"text\": \"\\n\", \"finished\": false, \"num_prompt_tokens\": null, \"num_completion_tokens\": 1 }, \"traceback\": null }\n{\"status\": \"SUCCESS\", \"output\": {\"text\": \"I\", \"finished\": false, \"num_prompt_tokens\": null, \"num_completion_tokens\": 2 }, \"traceback\": null }\n{\"status\": \"SUCCESS\", \"output\": {\"text\": \" don\", \"finished\": false, \"num_prompt_tokens\": null, \"num_completion_tokens\": 3 }, \"traceback\": null }\n{\"status\": \"SUCCESS\", \"output\": {\"text\": \"\u2019\", \"finished\": false, \"num_prompt_tokens\": null, \"num_completion_tokens\": 4 }, \"traceback\": null }\n{\"status\": \"SUCCESS\", \"output\": {\"text\": \"t\", \"finished\": true, \"num_prompt_tokens\": null, \"num_completion_tokens\": 5 }, \"traceback\": null }\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>model_name</code> <code>str</code> <p>Name of the model to use. See Model Zoo for a list of Models that are supported.</p> required <code>prompt</code> <code>str</code> <p>The prompt to generate completions for, encoded as a string.</p> required <code>max_new_tokens</code> <code>int</code> <p>The maximum number of tokens to generate in the completion.</p> <p>The token count of your prompt plus <code>max_new_tokens</code> cannot exceed the model's context length. See Model Zoo for information on each supported model's context length.</p> <code>20</code> <code>temperature</code> <code>float</code> <p>What sampling temperature to use, in the range <code>(0, 1]</code>. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.</p> <code>0.2</code> <code>timeout</code> <code>int</code> <p>Timeout in seconds. This is the maximum amount of time you are willing to wait for a response.</p> <code>10</code> <code>stream</code> <code>bool</code> <p>Whether to stream the response. If true, the return type is an <code>Iterator[CompletionStreamV1Response]</code>. Otherwise, the return type is a <code>CompletionSyncV1Response</code>. When streaming, tokens will be sent as data-only server-sent events.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>response</code> <code>Union[CompletionSyncV1Response, AsyncIterable[CompletionStreamV1Response]]</code> <p>The generated response (if <code>streaming=False</code>) or iterator of response chunks (if <code>streaming=True</code>)</p>"},{"location":"api/python_client/#llmengine.completion.Completion.acreate","title":"acreate  <code>async</code> <code>classmethod</code>","text":"<pre><code>acreate(model_name: str, prompt: str, max_new_tokens: int = 20, temperature: float = 0.2, timeout: int = 10, stream: bool = False) -&gt; Union[CompletionSyncV1Response, AsyncIterable[CompletionStreamV1Response]]\n</code></pre> <p>Creates a completion for the provided prompt and parameters asynchronously (with <code>asyncio</code>).</p> Example without token streaming <pre><code>import asyncio\nfrom llmengine import Completion\nasync def main():\nresponse = await Completion.acreate(\nmodel_name=\"llama-7b\",\nprompt=\"Hello, my name is\",\nmax_new_tokens=10,\ntemperature=0.2,\n)\nprint(response.json())\nasyncio.run(main())\n</code></pre> JSON response <pre><code>{\n\"status\": \"SUCCESS\",\n\"outputs\":\n[\n{\n\"text\": \"_______, and I am a _____\",\n\"num_prompt_tokens\": null,\n\"num_completion_tokens\": 10\n}\n],\n\"traceback\": null\n}\n</code></pre> Example with token streaming <pre><code>import asyncio\nfrom llmengine import Completion\nasync def main():\nstream = await Completion.acreate(\nmodel_name=\"llama-7b\",\nprompt=\"why is the sky blue?\",\nmax_new_tokens=5,\ntemperature=0.2,\nstream=True,\n)\nasync for response in stream:\nif response.output:\nprint(response.json())\nasyncio.run(main())\n</code></pre> JSON responses <pre><code>{\"status\": \"SUCCESS\", \"output\": {\"text\": \"\\n\", \"finished\": false, \"num_prompt_tokens\": null, \"num_completion_tokens\": 1}, \"traceback\": null}\n{\"status\": \"SUCCESS\", \"output\": {\"text\": \"I\", \"finished\": false, \"num_prompt_tokens\": null, \"num_completion_tokens\": 2}, \"traceback\": null}\n{\"status\": \"SUCCESS\", \"output\": {\"text\": \" think\", \"finished\": false, \"num_prompt_tokens\": null, \"num_completion_tokens\": 3}, \"traceback\": null}\n{\"status\": \"SUCCESS\", \"output\": {\"text\": \" the\", \"finished\": false, \"num_prompt_tokens\": null, \"num_completion_tokens\": 4}, \"traceback\": null}\n{\"status\": \"SUCCESS\", \"output\": {\"text\": \" sky\", \"finished\": true, \"num_prompt_tokens\": null, \"num_completion_tokens\": 5}, \"traceback\": null}\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>model_name</code> <code>str</code> <p>Name of the model to use. See Model Zoo for a list of Models that are supported.</p> required <code>prompt</code> <code>str</code> <p>The prompt to generate completions for, encoded as a string.</p> required <code>max_new_tokens</code> <code>int</code> <p>The maximum number of tokens to generate in the completion.</p> <p>The token count of your prompt plus <code>max_new_tokens</code> cannot exceed the model's context length. See Model Zoo for information on each supported model's context length.</p> <code>20</code> <code>temperature</code> <code>float</code> <p>What sampling temperature to use, in the range <code>(0, 1]</code>. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.</p> <code>0.2</code> <code>timeout</code> <code>int</code> <p>Timeout in seconds. This is the maximum amount of time you are willing to wait for a response.</p> <code>10</code> <code>stream</code> <code>bool</code> <p>Whether to stream the response. If true, the return type is an <code>Iterator[CompletionStreamV1Response]</code>. Otherwise, the return type is a <code>CompletionSyncV1Response</code>. When streaming, tokens will be sent as data-only server-sent events.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>response</code> <code>Union[CompletionSyncV1Response, AsyncIterable[CompletionStreamV1Response]]</code> <p>The generated response (if <code>streaming=False</code>) or iterator of response chunks (if <code>streaming=True</code>)</p>"},{"location":"api/python_client/#llmengine.CompletionOutput","title":"CompletionOutput","text":"<p>             Bases: <code>BaseModel</code></p> <p>Represents the output of a completion request to a model.</p>"},{"location":"api/python_client/#llmengine.data_types.CompletionOutput.text","title":"text  <code>instance-attribute</code>","text":"<pre><code>text: str\n</code></pre> <p>The text of the completion.</p>"},{"location":"api/python_client/#llmengine.data_types.CompletionOutput.num_prompt_tokens","title":"num_prompt_tokens  <code>instance-attribute</code>","text":"<pre><code>num_prompt_tokens: Optional[int]\n</code></pre> <p>Number of tokens in the prompt.</p>"},{"location":"api/python_client/#llmengine.data_types.CompletionOutput.num_completion_tokens","title":"num_completion_tokens  <code>instance-attribute</code>","text":"<pre><code>num_completion_tokens: int\n</code></pre> <p>Number of tokens in the completion.</p>"},{"location":"api/python_client/#llmengine.CompletionSyncV1Response","title":"CompletionSyncV1Response","text":"<p>             Bases: <code>BaseModel</code></p> <p>Response object for a synchronous prompt completion.</p>"},{"location":"api/python_client/#llmengine.data_types.CompletionSyncV1Response.outputs","title":"outputs  <code>instance-attribute</code>","text":"<pre><code>outputs: List[CompletionOutput]\n</code></pre> <p>List of completion outputs.</p>"},{"location":"api/python_client/#llmengine.data_types.CompletionSyncV1Response.status","title":"status  <code>instance-attribute</code>","text":"<pre><code>status: TaskStatus\n</code></pre> <p>Task status.</p>"},{"location":"api/python_client/#llmengine.data_types.CompletionSyncV1Response.traceback","title":"traceback  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>traceback: Optional[str] = None\n</code></pre> <p>Traceback if the task failed.</p>"},{"location":"api/python_client/#llmengine.CompletionStreamOutput","title":"CompletionStreamOutput","text":"<p>             Bases: <code>BaseModel</code></p>"},{"location":"api/python_client/#llmengine.data_types.CompletionStreamOutput.text","title":"text  <code>instance-attribute</code>","text":"<pre><code>text: str\n</code></pre> <p>The text of the completion.</p>"},{"location":"api/python_client/#llmengine.data_types.CompletionStreamOutput.finished","title":"finished  <code>instance-attribute</code>","text":"<pre><code>finished: bool\n</code></pre> <p>Whether the completion is finished.</p>"},{"location":"api/python_client/#llmengine.data_types.CompletionStreamOutput.num_prompt_tokens","title":"num_prompt_tokens  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>num_prompt_tokens: Optional[int] = None\n</code></pre> <p>Number of tokens in the prompt.</p>"},{"location":"api/python_client/#llmengine.data_types.CompletionStreamOutput.num_completion_tokens","title":"num_completion_tokens  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>num_completion_tokens: Optional[int] = None\n</code></pre> <p>Number of tokens in the completion.</p>"},{"location":"api/python_client/#llmengine.CompletionStreamV1Response","title":"CompletionStreamV1Response","text":"<p>             Bases: <code>BaseModel</code></p> <p>Response object for a stream prompt completion task.</p>"},{"location":"api/python_client/#llmengine.data_types.CompletionStreamV1Response.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[CompletionStreamOutput] = None\n</code></pre> <p>Completion output.</p>"},{"location":"api/python_client/#llmengine.data_types.CompletionStreamV1Response.status","title":"status  <code>instance-attribute</code>","text":"<pre><code>status: TaskStatus\n</code></pre> <p>Task status.</p>"},{"location":"api/python_client/#llmengine.data_types.CompletionStreamV1Response.traceback","title":"traceback  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>traceback: Optional[str] = None\n</code></pre> <p>Traceback if the task failed.</p>"},{"location":"api/python_client/#llmengine.FineTune","title":"FineTune","text":"<p>             Bases: <code>APIEngine</code></p> <p>FineTune API. This API is used to fine-tune models.</p>"},{"location":"api/python_client/#llmengine.fine_tuning.FineTune.create","title":"create  <code>classmethod</code>","text":"<pre><code>create(model: str, training_file: str, validation_file: Optional[str] = None, hyperparameters: Optional[Dict[str, str]] = None, suffix: Optional[str] = None) -&gt; CreateFineTuneResponse\n</code></pre> <p>Creates a job that fine-tunes a specified model from a given dataset.</p> Example <pre><code>from llmengine import FineTune\nresponse = FineTune.create(\nmodel=\"llama-7b\",\ntraining_file=\"s3://my-bucket/path/to/training-file.csv\",\n)\nprint(response.json())\n</code></pre> JSON Response <pre><code>{\n\"fine_tune_id\": \"ft_abc123\"\n}\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>`str`</code> <p>The name of the base model to fine-tune. See #model_zoo for the list of available models to fine-tune.</p> required <code>training_file</code> <code>`str`</code> <p>Path to file of training dataset</p> required <code>validation_file</code> <code>`Optional[str]`</code> <p>Path to file of validation dataset</p> <code>None</code> <code>hyperparameters</code> <code>`str`</code> <p>Hyperparameters</p> <code>None</code> <code>suffix</code> <code>`Optional[str]`</code> <p>A string that will be added to your fine-tuned model name.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>CreateFineTuneResponse</code> <code>CreateFineTuneResponse</code> <p>an object that contains the ID of the created fine-tuning job</p>"},{"location":"api/python_client/#llmengine.fine_tuning.FineTune.list","title":"list  <code>classmethod</code>","text":"<pre><code>list() -&gt; ListFineTunesResponse\n</code></pre> <p>List fine-tuning jobs</p> Example <pre><code>from llmengine import FineTune\nresponse = FineTune.list()\nprint(response.json())\n</code></pre> JSON Response <pre><code>[\n{\n\"fine_tune_id\": \"ft_abc123\",\n\"status\": \"RUNNING\"\n},\n{\n\"fine_tune_id\": \"ft_def456\",\n\"status\": \"SUCCESS\"\n}\n]\n</code></pre> <p>Returns:</p> Name Type Description <code>ListFineTunesResponse</code> <code>ListFineTunesResponse</code> <p>an object that contains a list of all fine-tuning jobs and their statuses</p>"},{"location":"api/python_client/#llmengine.fine_tuning.FineTune.retrieve","title":"retrieve  <code>classmethod</code>","text":"<pre><code>retrieve(fine_tune_id: str) -&gt; GetFineTuneResponse\n</code></pre> <p>Get status of a fine-tuning job</p> Example <pre><code>from llmengine import FineTune\nresponse = FineTune.retrieve(\nfine_tune_id=\"ft_abc123\",\n)\nprint(response.json())\n</code></pre> JSON Response <pre><code>{\n\"fine_tune_id\": \"ft_abc123\",\n\"status\": \"RUNNING\"\n}\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>fine_tune_id</code> <code>`str`</code> <p>ID of the fine-tuning job</p> required <p>Returns:</p> Name Type Description <code>GetFineTuneResponse</code> <code>GetFineTuneResponse</code> <p>an object that contains the ID and status of the requested job</p>"},{"location":"api/python_client/#llmengine.fine_tuning.FineTune.cancel","title":"cancel  <code>classmethod</code>","text":"<pre><code>cancel(fine_tune_id: str) -&gt; CancelFineTuneResponse\n</code></pre> <p>Cancel a fine-tuning job</p> Example <pre><code>from llmengine import FineTune\nresponse = FineTune.cancel(fine_tune_id=\"ft_abc123\")\nprint(response.json())\n</code></pre> JSON Response <pre><code>{\n\"success\": \"true\"\n}\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>fine_tune_id</code> <code>`str`</code> <p>ID of the fine-tuning job</p> required <p>Returns:</p> Name Type Description <code>CancelFineTuneResponse</code> <code>CancelFineTuneResponse</code> <p>an object that contains whether the cancellation was successful</p>"},{"location":"api/python_client/#llmengine.CreateFineTuneResponse","title":"CreateFineTuneResponse","text":"<p>             Bases: <code>BaseModel</code></p> <p>Response object for creating a FineTune.</p>"},{"location":"api/python_client/#llmengine.data_types.CreateFineTuneResponse.fine_tune_id","title":"fine_tune_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>fine_tune_id: str = Field(..., description='ID of the created fine-tuning job.')\n</code></pre> <p>The ID of the FineTune.</p>"},{"location":"api/python_client/#llmengine.GetFineTuneResponse","title":"GetFineTuneResponse","text":"<p>             Bases: <code>BaseModel</code></p> <p>Response object for retrieving a FineTune.</p>"},{"location":"api/python_client/#llmengine.data_types.GetFineTuneResponse.fine_tune_id","title":"fine_tune_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>fine_tune_id: str = Field(..., description='ID of the requested job.')\n</code></pre> <p>The ID of the FineTune.</p>"},{"location":"api/python_client/#llmengine.data_types.GetFineTuneResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: BatchJobStatus = Field(..., description='Status of the requested job.')\n</code></pre> <p>The status of the FineTune job.</p>"},{"location":"api/python_client/#llmengine.ListFineTunesResponse","title":"ListFineTunesResponse","text":"<p>             Bases: <code>BaseModel</code></p> <p>Response object for listing FineTunes.</p>"},{"location":"api/python_client/#llmengine.data_types.ListFineTunesResponse.jobs","title":"jobs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>jobs: List[GetFineTuneResponse] = Field(..., description='List of fine-tuning jobs and their statuses.')\n</code></pre> <p>A list of FineTunes, represented as <code>GetFineTuneResponse</code>s.</p>"},{"location":"api/python_client/#llmengine.CancelFineTuneResponse","title":"CancelFineTuneResponse","text":"<p>             Bases: <code>BaseModel</code></p> <p>Response object for cancelling a FineTune.</p>"},{"location":"api/python_client/#llmengine.data_types.CancelFineTuneResponse.success","title":"success  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>success: bool = Field(..., description='Whether cancellation was successful.')\n</code></pre> <p>Whether the cancellation succeeded.</p>"},{"location":"guides/completions/","title":"Completions","text":"<p>LLM Engine provides access to open source language models (see Model Zoo) that can be used for producing Completions.  An example API call looks as follows: <pre><code>from llmengine import Completion\nresponse = Completion.create(\nmodel_name=\"llama-7b\",\nprompt=\"Hello, my name is\",\nmax_new_tokens=10,\ntemperature=0.2,\n)\n</code></pre></p> <p>See the full API reference documentation to learn more.</p>"},{"location":"guides/completions/#completions-response-format","title":"Completions response format","text":"<p>An example Completions API response looks as follows:</p> <pre><code>{\n\"outputs\":\n[\n{\n\"text\": \"_______ and I am a _______\",\n\"num_completion_tokens\": 10\n}\n],\n}\n</code></pre> <p>In Python, the response is of type CompletionSyncV1Response, which maps to the above JSON structure.</p>"},{"location":"guides/completions/#token-streaming","title":"Token streaming","text":"<p>The Completions API support token streaming to reduce perceived latency for certain applications. When streaming,  tokens will be sent as data-only server-side events.</p> <p>To enable token streaming, pass <code>stream=True</code> to either <code>Completion.create</code> or <code>Completion.acreate</code>.</p> <p>An example of token streaming using the synchronous Completions API looks as follows: <pre><code>from llmengine import Completion\nstream = Completion.create(\nmodel_name=\"llama-7b\",\nprompt=\"why is the sky blue?\",\nmax_new_tokens=5,\ntemperature=0.2,\nstream=True,\n)\nfor response in stream:\nif response.output:\nprint(response.json())\n</code></pre></p>"},{"location":"guides/completions/#async-requests","title":"Async requests","text":"<p>The Python client supports <code>asyncio</code> for creating Completions. Use <code>Completion.acreate</code> instead of <code>Completion.create</code>  to utilize async processing. The function signatures are otherwise identical.</p> <p>An example of async Completions looks as follows: <pre><code>import asyncio\nfrom llmengine import Completion\nasync def main():\nresponse = await Completion.acreate(\nmodel_name=\"llama-7b\",\nprompt=\"Hello, my name is\",\nmax_new_tokens=10,\ntemperature=0.2,\n)\nprint(response.json())\nasyncio.run(main())\n</code></pre></p>"},{"location":"guides/completions/#which-model-should-i-use","title":"Which model should I use?","text":"<p>See the Model Zoo for more information on best practices for which model to use for Completions.</p>"},{"location":"guides/fine_tuning/","title":"Fine-tuning","text":"<p>Learn how to customize your models on your data with fine-tuning.</p>"},{"location":"guides/fine_tuning/#introduction","title":"Introduction","text":"<p>Fine-tuning helps improve model performance by training on specific examples of prompts and desired responses. LLMs are initially trained on data collected from the entire internet. With fine-tuning, LLMs can be optimized to perform better in a specific domain by learning from examples for that domain. Smaller LLMs that have been fine-tuned on a specific use case often outperform larger ones that were trained more generally.</p> <p>Fine-tuning allows for:</p> <ol> <li>Higher quality results than prompt engineering alone</li> <li>Cost savings through shorter prompts</li> <li>The ability to reach equivalent accuracy with a smaller model</li> <li>Lower latency at inference time</li> <li>The chance to show an LLM more examples than can fit in a single context window</li> </ol> <p>LLM Engine's fine-tuning API lets you fine-tune various open source LLMs on your own data and then make inference calls to the resulting LLM. For more specific details, see the fine-tuning API Python client reference.</p>"},{"location":"guides/fine_tuning/#preparing-data","title":"Preparing data","text":"<p>Your training data should consist of prompt and response pairs. Your data must be formatted as a CSV file that includes two columns: <code>prompt</code> and <code>response</code>. A maximum of 100,000 rows of data is currently supported. At least 200 rows of data is recommended to start to see benefits from fine-tuning.</p> <p>As a rule of thumb, you should expect to see linear improvements in your fine-tuned model's quality with each doubling of the dataset size. Having high-quality data is also essential to improving performance. For every linear increase in the error rate in your training data, you may encounter a roughly quadratic increase in your fine-tuned model's error rate.</p> <p>Here is an example script to create a 50-row CSV of properly formatted data for fine-tuning an airline question answering bot:</p> Creating a sample dataset <pre><code>import csv\n# Define data\ndata = [\n(\"What is your policy on carry-on luggage?\", \"Our policy allows each passenger to bring one piece of carry-on luggage and one personal item such as a purse or briefcase. The maximum size for carry-on luggage is 22 x 14 x 9 inches.\"),\n(\"How can I change my flight?\", \"You can change your flight through our website or mobile app. Go to 'Manage my booking' section, enter your booking reference and last name, then follow the prompts to change your flight.\"),\n(\"What meals are available on my flight?\", \"We offer a variety of meals depending on the flight's duration and route. These can range from snacks and light refreshments to full-course meals on long-haul flights. Specific meal options can be viewed during the booking process.\"),\n(\"How early should I arrive at the airport before my flight?\", \"We recommend arriving at least two hours before domestic flights and three hours before international flights.\"),\n(\"Can I select my seat in advance?\", \"Yes, you can select your seat during the booking process or afterwards via the 'Manage my booking' section on our website or mobile app.\"),\n(\"What should I do if my luggage is lost?\", \"If your luggage is lost, please report this immediately at our 'Lost and Found' counter at the airport. We will assist you in tracking your luggage.\"),\n(\"Do you offer special assistance for passengers with disabilities?\", \"Yes, we offer special assistance for passengers with disabilities. Please notify us of your needs at least 48 hours prior to your flight.\"),\n(\"Can I bring my pet on the flight?\", \"Yes, we allow small pets in the cabin, and larger pets in the cargo hold. Please check our pet policy for more details.\"),\n(\"What is your policy on flight cancellations?\", \"In case of flight cancellations, we aim to notify passengers as early as possible and offer either a refund or a rebooking on the next available flight.\"),\n(\"Can I get a refund if I cancel my flight?\", \"Refunds depend on the type of ticket purchased. Please check our cancellation policy for details. Non-refundable tickets, however, are typically not eligible for refunds unless due to extraordinary circumstances.\"),\n(\"How can I check-in for my flight?\", \"You can check-in for your flight either online, through our mobile app, or at the airport. Online and mobile app check-in opens 24 hours before departure and closes 90 minutes before.\"),\n(\"Do you offer free meals on your flights?\", \"Yes, we serve free meals on all long-haul flights. For short-haul flights, we offer a complimentary drink and snack. Special meal requests should be made at least 48 hours before departure.\"),\n(\"Can I use my electronic devices during the flight?\", \"Small electronic devices can be used throughout the flight in flight mode. Larger devices like laptops may be used above 10,000 feet.\"),\n(\"How much baggage can I check-in?\", \"The checked baggage allowance depends on the class of travel and route. The details would be mentioned on your ticket, or you can check on our website.\"),\n(\"How can I request for a wheelchair?\", \"To request a wheelchair or any other special assistance, please call our customer service at least 48 hours before your flight.\"),\n(\"Do I get a discount for group bookings?\", \"Yes, we offer discounts on group bookings of 10 or more passengers. Please contact our group bookings team for more information.\"),\n(\"Do you offer Wi-fi on your flights?\", \"Yes, we offer complimentary Wi-fi on select flights. You can check the availability during the booking process.\"),\n(\"What is the minimum connecting time between flights?\", \"The minimum connecting time varies depending on the airport and whether your flight is international or domestic. Generally, it's recommended to allow at least 45-60 minutes for domestic connections and 60-120 minutes for international.\"),\n(\"Do you offer duty-free shopping on international flights?\", \"Yes, we have a selection of duty-free items that you can pre-order on our website or purchase onboard on international flights.\"),\n(\"Can I upgrade my ticket to business class?\", \"Yes, you can upgrade your ticket through the 'Manage my booking' section on our website or by contacting our customer service. The availability and costs depend on the specific flight.\"),\n(\"Can unaccompanied minors travel on your flights?\", \"Yes, we do accommodate unaccompanied minors on our flights, with special services to ensure their safety and comfort. Please contact our customer service for more details.\"),\n(\"What amenities do you provide in business class?\", \"In business class, you will enjoy additional legroom, reclining seats, premium meals, priority boarding and disembarkation, access to our business lounge, extra baggage allowance, and personalized service.\"),\n(\"How much does extra baggage cost?\", \"Extra baggage costs vary based on flight route and the weight of the baggage. Please refer to our 'Extra Baggage' section on the website for specific rates.\"),\n(\"Are there any specific rules for carrying liquids in carry-on?\", \"Yes, liquids carried in your hand luggage must be in containers of 100 ml or less and they should all fit into a single, transparent, resealable plastic bag of 20 cm x 20 cm.\"),\n(\"What if I have a medical condition that requires special assistance during the flight?\", \"We aim to make the flight comfortable for all passengers. If you have a medical condition that may require special assistance, please contact our \u2018special services\u2019 team 48 hours before your flight.\"),\n(\"What in-flight entertainment options are available?\", \"We offer a range of in-flight entertainment options including a selection of movies, TV shows, music, and games, available on your personal seat-back screen.\"),\n(\"What types of payment methods do you accept?\", \"We accept credit/debit cards, PayPal, bank transfers, and various other forms of payment. The available options may vary depending on the country of departure.\"),\n(\"How can I earn and redeem frequent flyer miles?\", \"You can earn miles for every journey you take with us or our partner airlines. These miles can be redeemed for flight tickets, upgrades, or various other benefits. To earn and redeem miles, you need to join our frequent flyer program.\"),\n(\"Can I bring a stroller for my baby?\", \"Yes, you can bring a stroller for your baby. It can be checked in for free and will normally be given back to you at the aircraft door upon arrival.\"),\n(\"What age does my child have to be to qualify as an unaccompanied minor?\", \"Children aged between 5 and 12 years who are traveling alone are considered unaccompanied minors. Our team provides special care for these children from departure to arrival.\"),\n(\"What documents do I need to travel internationally?\", \"For international travel, you need a valid passport and may also require visas, depending on your destination and your country of residence. It's important to check the specific requirements before you travel.\"),\n(\"What happens if I miss my flight?\", \"If you miss your flight, please contact our customer service immediately. Depending on the circumstances, you may be able to rebook on a later flight, but additional fees may apply.\"),\n(\"Can I travel with my musical instrument?\", \"Yes, small musical instruments can be brought on board as your one carry-on item. Larger instruments must be transported in the cargo, or if small enough, a seat may be purchased for them.\"),\n(\"Do you offer discounts for children or infants?\", \"Yes, children aged 2-11 traveling with an adult usually receive a discount on the fare. Infants under the age of 2 who do not occupy a seat can travel for a reduced fare or sometimes for free.\"),\n(\"Is smoking allowed on your flights?\", \"No, all our flights are non-smoking for the comfort and safety of all passengers.\"),\n(\"Do you have family seating?\", \"Yes, we offer the option to seat families together. You can select seats during booking or afterwards through the 'Manage my booking' section on the website.\"),\n(\"Is there any discount for senior citizens?\", \"Some flights may offer a discount for senior citizens. Please check our website or contact customer service for accurate information.\"),\n(\"What items are prohibited on your flights?\", \"Prohibited items include, but are not limited to, sharp objects, firearms, explosive materials, and certain chemicals. You can find a comprehensive list on our website under the 'Security Regulations' section.\"),\n(\"Can I purchase a ticket for someone else?\", \"Yes, you can purchase a ticket for someone else. You'll need their correct name as it appears on their government-issued ID, and their correct travel dates.\"),\n(\"What is the process for lost and found items on the plane?\", \"If you realize you forgot an item on the plane, report it as soon as possible to our lost and found counter. We will make every effort to locate and return your item.\"),\n(\"Can I request a special meal?\", \"Yes, we offer a variety of special meals to accommodate dietary restrictions. Please request your preferred meal at least 48 hours prior to your flight.\"),\n(\"Is there a weight limit for checked baggage?\", \"Yes, luggage weight limits depend on your ticket class and route. You can find the details on your ticket or by visiting our website.\"),\n(\"Can I bring my sports equipment?\", \"Yes, certain types of sports equipment can be carried either as or in addition to your permitted baggage. Some equipment may require additional fees. It's best to check our policy on our website or contact us directly.\"),\n(\"Do I need a visa to travel to certain countries?\", \"Yes, visa requirements depend on the country you are visiting and your nationality. We advise checking with the relevant embassy or consulate prior to travel.\"),\n(\"How can I add extra baggage to my booking?\", \"You can add extra baggage to your booking through the 'Manage my booking' section on our website or by contacting our customer services.\"),\n(\"Can I check-in at the airport?\", \"Yes, you can choose to check-in at the airport. However, we also offer online and mobile check-in, which may save you time.\"),\n(\"How do I know if my flight is delayed or cancelled?\", \"In case of any changes to your flight, we will attempt to notify all passengers using the contact information given at the time of booking. You can also check your flight status on our website.\"),\n(\"What is your policy on pregnant passengers?\", \"Pregnant passengers can travel up to the end of the 36th week for single pregnancies, and the end of the 32nd week for multiple pregnancies. We recommend consulting your doctor before any air travel.\"),\n(\"Can children travel alone?\", \"Yes, children age 5 to 12 can travel alone as unaccompanied minors. We provide special care for these seats. Please contact our customer service for more information.\"),\n(\"How can I pay for my booking?\", \"You can pay for your booking using a variety of methods including credit and debit cards, PayPal, or bank transfers. The options may vary depending on the country of departure.\"),\n]\n# Write data to a CSV file\nwith open('customer_service_data.csv', 'w', newline='') as file:\nwriter = csv.writer(file)\nwriter.writerow([\"prompt\", \"response\"])\nwriter.writerows(data)\n</code></pre>"},{"location":"guides/fine_tuning/#making-your-data-accessible-to-llm-engine","title":"Making your data accessible to LLM Engine","text":"<p>Currently, data needs to be uploaded to a publicly accessible web URL so that it can be read for fine-tuning. Publicly accessible HTTP, HTTPS, and S3 URLs are currently supported. Support for privately sharing data with the LLM Engine API is coming shortly.</p>"},{"location":"guides/fine_tuning/#launching-the-fine-tune","title":"Launching the fine-tune","text":"<p>Once you have uploaded your data, you can use the LLM Engine API to launch a fine-tune. You will need to specify which base model to fine-tune, the locations of the training file and optional validation data file, an optional set of hyperparameters to customize the fine-tuning behavior, and an optional suffix to append to the name of the fine-tune.</p> Create a fine-tune <pre><code>from llmengine import FineTune\nresponse = FineTune.create(\nmodel=\"llama-7b\",\ntraining_file=\"s3://my-bucket/path/to/training-file.csv\",\n)\nprint(response.json())\n</code></pre> <p>See the Model Zoo to see which models have fine-tuning support.</p> <p>Once the fine-tune is launched, you can also get the status of your fine-tune.</p>"},{"location":"guides/fine_tuning/#making-inference-calls-to-your-fine-tune","title":"Making inference calls to your fine-tune","text":"<p>Once your fine-tune is finished, you will be able to start making inference requests to the model. You can use the <code>fine_tune_id</code> returned from your FineTune.create API call to reference your fine-tuned model in the Completions API. Alternatively, you can list available LLMs with <code>Model.list</code> in order to find the name of your fine-tuned model. See the Completion API for more details. You can then use that name to direct your completion requests.</p> Inference with a fine-tuned model <pre><code>from llmengine import Completion\nresponse = Completion.create(\nmodel_name=\"ft_abc123\",\nprompt=\"Do you offer in-flight Wi-fi?\",\nmax_new_tokens=100,\ntemperature=0.2,\n)\nprint(response.json())\n</code></pre>"},{"location":"guides/rate_limits/","title":"Overview","text":""},{"location":"guides/rate_limits/#what-are-rate-limits","title":"What are rate limits?","text":"<p>A rate limit is a restriction that an API imposes on the number of times a user or client can access the server within  a specified period of time.</p>"},{"location":"guides/rate_limits/#why-do-we-have-rate-limits","title":"Why do we have rate limits?","text":"<p>Rate limits are a common practice for APIs, and they're put in place for a few different reasons:</p> <ul> <li>They help protect against abuse or misuse of the API. For example, a malicious actor could flood the API with  requests in an attempt to overload it or cause disruptions in the service. By setting rate limits, the LLM Engine  server can prevent this kind of activity.</li> <li>Rate limits help ensure that everyone has fair access to API. If one person or organization makes an excessive  number of requests, it could bog down the API for everyone else. By throttling the number of requests that a single  user can make, LLM Engine ensures that the most number of people have an opportunity to use the API without  experiencing slowdowns. This also applies when self-hosting LLM Engine, as all internal users within an organization  would have fair access.</li> <li>Rate limits can help manage the aggregate load on the server infrastructure. If requests to the API increase  dramatically, it could tax the servers and cause performance issues. By setting rate limits, LLM Engine can help  maintain a smooth and consistent experience for all users. This is especially important when self-hosting LLM Engine.</li> </ul>"},{"location":"guides/rate_limits/#how-do-i-know-if-i-am-rate-limited","title":"How do I know if I am rate limited?","text":"<p>Per standard HTTP practices, your request will receive a response with HTTP status code of <code>429</code>, <code>Too Many Requests</code>.</p>"},{"location":"guides/rate_limits/#what-are-the-rate-limits-for-our-api","title":"What are the rate limits for our API?","text":"<p>The LLM Engine API is currently in a preview mode, and therefore we currently do not have any advertised rate limits. As the API moves towards a production release, we will update this section with specific rate limits. For now, the API will return HTTP 429 on an as-needed basis.</p>"},{"location":"guides/rate_limits/#error-mitigation","title":"Error mitigation","text":""},{"location":"guides/rate_limits/#retrying-with-exponential-backoff","title":"Retrying with exponential backoff","text":"<p>One easy way to avoid rate limit errors is to automatically retry requests with a random exponential backoff.  Retrying with exponential backoff means performing a short sleep when a rate limit error is hit, then retrying the  unsuccessful request. If the request is still unsuccessful, the sleep length is increased and the process is repeated.  This continues until the request is successful or until a maximum number of retries is reached. This approach has many benefits:</p> <ul> <li>Automatic retries means you can recover from rate limit errors without crashes or missing data</li> <li>Exponential backoff means that your first retries can be tried quickly, while still benefiting from longer delays if your first few retries fail</li> <li>Adding random jitter to the delay helps retries from all hitting at the same time.</li> </ul> <p>Below are a few example solutions for Python that use exponential backoff.</p>"},{"location":"guides/rate_limits/#example-1-using-the-tenacity-library","title":"Example #1: Using the <code>tenacity</code> library","text":"<p>Tenacity is an Apache 2.0 licensed general-purpose retrying library, written in Python, to simplify the task of adding  retry behavior to just about anything. To add exponential backoff to your requests, you can use the tenacity.retry  decorator. The below example uses the tenacity.wait_random_exponential function to add random exponential backoff to a  request.</p> <pre><code>import llmengine\nfrom tenacity import (\nretry,\nstop_after_attempt,\nwait_random_exponential,\n)  # for exponential backoff\n@retry(wait=wait_random_exponential(min=1, max=60), stop=stop_after_attempt(6))\ndef completion_with_backoff(**kwargs):\nreturn llmengine.Completion.create(**kwargs)\ncompletion_with_backoff(model_name=\"llama-7b\", prompt=\"Why is the sky blue?\")\n</code></pre>"},{"location":"guides/rate_limits/#example-2-using-the-backoff-library","title":"Example #2: Using the <code>backoff</code> library","text":"<p>Another python library that provides function decorators for backoff and retry is backoff:</p> <pre><code>import llmengine\nimport backoff\n@backoff.on_exception(backoff.expo, llmengine.error.RateLimitError)\ndef completions_with_backoff(**kwargs):\nreturn llmengine.Completion.create(**kwargs)\ncompletions_with_backoff(model_name=\"llama-7b\", prompt=\"Why is the sky blue?\")\n</code></pre>"},{"location":"guides/token_streaming/","title":"Token streaming","text":"<p>The Completions APIs support a <code>stream</code> boolean parameter that, when <code>True</code>, will return a streamed response of token-by-token server-sent events (SSEs) rather than waiting to receive the full response when model generation has finished. This decreases latency of when you start getting a response.</p> <p>The response will consist of SSEs of the form <code>{\"token\": dict, \"generated_text\": str | null, \"details\": dict | null}</code>, where the dictionary for each token will contain log probability information in addition to the generated string; the <code>generated_text</code> field will be <code>null</code> for all but the last SSE, for which it will contain the full generated response.</p>"}]}